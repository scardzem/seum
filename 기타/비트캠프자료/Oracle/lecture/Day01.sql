1. DB(Data Base)
- 여러 사람이 공유하고 사용할 목적으로 관리하는 데이터 집합체
- 자료의 중복을 없애고 구조화하여 효율적으로 데이터 관리 가능

2. DBMS(Data Base Management System)
- 데이터베이스를 조작하고 관리하는 소프트웨어
- 데이터베이스를 구축하는 데 필요한 틀을 제공
- 데이터 저장 및 검색 기능 제공
- 데이터의 백업과 보안에도 용이
- Oracle, MySQL, MariaDB, MsSQL, MongoDB(NoSql)……
- 

3. DBMS의 구조
- 기본적으로 CS프로그램의 형태
- CS프로그램 : Client-Server 프로그램
- Oracle 18c가 DB서버의 역할
- Sql Developer가 클라이언트 역할
- 테이블 및 데이터 생성 시 서버에 생성됨
- 클라이언트 프로그램으로 접속하여 조작할 수 있음
- 다른 Oracle 서버에 접속하고 싶으면 타 서버의 ip와 port, 계정을 사용
- localhost(== 127.0.0.1) : 현재 PC의 ip주소

 4. 실습 테이블 구조
(아래 1)과 2)를 사용해서 실습 진행 예정.)
1) 직원 관련 테이블들

- EMP : 사원 정보 저장
- DEPT : 부서 정보 열람
- SALGRAD : 급여 정보 저장

2) 학생 관련 테이블들

- STUDENT : 학생 정보 저장
- PROFESSOR : 교수 정보 저장
- COURSE : 강의 정보 저장
- SCORE : 점수 정보 저장
- SCGRADE : 점수 등급 저장

5. 테이블을 생성하는 CREATE 구문
- CREATE 생성할 테이블 명(
    
          저장 할 내용 및 형식 지정
    
    **);**
    
- --dept라는 이름의 테이블 생성
(초기데이터 복사해서 아래 내용에 설명)

CREATE TABLE dept (

   --문자열 2자리인 사원번호 컬럼 생성
dno varchar2(2),

   -- 문자열 14자리인 사원이름 컬럼 생성
dname varchar2(14),

   --문자열 8자리인 지역 컬럼 생성
loc varchar2(8) ,

   --문자열 4자리인 관리자 컬럼 생성
director  varchar2(4)
);

6. 데이터를 저장하는 INSERT INTO 구문

-- 지정한 컬럼에만 데이터를 저장하고 싶을 때 아래 방법 사용

- INSERT INTO 데이터를 저장할 테이블명(

          데이터가 저장 될 컬럼 이름 지정

)

- VALUES(
     컬럼에 저장 될 데이터
);

-- 모든 컬럼에 데이터 저장할 때 아래 방법

- INSERT INTO 데이터를 저장 할 테이블 명 VAUES(
    컬럼에 저장 될 데이터
);
--EMP테이블에 데이터 한 건 저장
--모든 컬럼에 데이터 지정
(초기데이터 복사해서 아래 내용에 설명)
INSERT INTO EMP VALUES (
--사원번호
'0001',
--사원이름
'안영희',
--부서명
'경영',
--관리자(사수) 사원번호
NULL,
--입사일
'1991-01-01:13:11:23',
--급여
4800,
--보너스
0,
--소속부서 번호
'01'
);

--지정한 컬럼에만 데이터 저장
--나머지 값들은 NULL 입력
- INSERT INTO EMP (
--사원번호
'0001',
--사원이름
'안영희',
--부서명
'경영',
);

7. 테이블의 구조를 확인하는 DESC 구문
    - DESC 구조를 확인할 테이블 명;


8. 테이블의 데이터를 조회하는 SELECT FROM 구문
    --지정한 컬럼의 데이터만 조회
    - SELECT 조회 할 데이터의 컬럼 FROM 조회할 테이블 명
    -- 모든 컬럼의 데이터 조회
    - SELECT * FROM 조회할 테이블 명
    - 쿼리를 구현할 때는 엔터 값과 들여쓰기를 적절히 활용해서
      쿼리 분석이 용이하도록 구현한다.
    - 조회 쿼리는 테이블정보가 변경되지 않기 때문에 COMMIT이 필요 없다
--DV----STUDY-6

9. 조회하는 컬럼 명이나 테이블에 별칭 붙이기
    - 조회하는 컬럼 또는 테이블 AS(: 생략 가능) 별칭
--DV----STUDY-6(아래)

10. 데이터 값이 NULL값인지를 검사하는 NVL 구문
    - NVL(조회할 컬럼, null값이면 대체해서 표출 할 구문)
--DV----STUDY-6(아래)

11. 문자열 연결해주는 || 연결연산자
    - 연결연산자(||)를 이용하면 여러개의 컬럼을 하나로 묶어서 표출
    - 연결해서 표출할 컬럼1 || 연결해서 표출할 컬럼2
--DV----STUDY-6(아래)

12. 중복 데이터를 제거하는 DISTINCT 구문
    - DISTINCT 컬럼명
    - SELECT 구문에 포함하여 사용
    - 중복된 데이터가 하나로 표출
--DV----STUDY-6(아래)

13. 지정한 컬럼을 기준으로 정렬하고 싶을 때 사용하는 ORDER BY 구문
    --기본형
    - SELECT * FROM 테이블 명
        ORDER BY 정렬의 기준이 될 컬럼;
        ex) SELECT * FROM 테이블 명
                ORDER BY 정렬기준컬럼 ASC || DESC
    - ASC, DESC 키워드 사용하여 정렬 순서를 정함
    - 키워드를 생략하면 기본적으로 ASC로 정렬됨
    - ASC : 오름차순 정렬
    - DESC : 내림차순 정렬

14. 조건을 걸어주는 WHERE 구문에
    - SELECT * FROM 테이블 명
        WHERE 조회조건;

15. 데이터 값이 null인지 아닌지를 검사하는 ISNULL
    - SELECT * FROM 테이블 명
        WHERE null체크할 컬럼 IS NULL;
    - IS NULL : 데이터 값이 null인 데이터 반환
    - IS NOT NULL : 데이터 값이 null이 아닌 데이터 반환

16. 다중 조건을 걸어주는 AND 구문
    - SELECT * FROM 테이블 명
        WHERE 조회조건1
          AND 조회조건2
          AND 조회조건3;
          ...            --조회조건 계속 추가 가능
    - 조회조건을 모두 충족하는 데이터만 표출

17. 다중 조건을 걸어주는 OR 구문
    - SELECT * FROM 테이블 명
        WHERE 조회조건1
        OR 조회조건2
        OR 조회조건3
                  ...            --조회조건 계속 추가 가능
        - 조회조건을 하나 이상 충족하는 데이터만 표출

18. 문자열을 검색하는 데 사용하는 LIKE 구문
    - SELECT * FROM 테이블 명
        WHERE 문자열 검색할 컬럼명 LIKE 비교할 문자열을
    - '_' : 한 개의 문자열 의미        
            단어가 하나로 된 데이터만 검색
    - '%' : 문자열을 대체(없는 경우도 포함)
        ex) LIKE '김%' : 김으로 시작되는 데이터 모두 검색
            LIKE '%경' : 경으로 끝나는 데이터 모두 검색
            LIKE '화_' : 화로 시작하고 두 글자인 데이터 모두 검색
            LIKE '_화' : 화로 끝나고 두 글자인 데이터 모두 검색
            LIKE '_동_' : 가운데 단어가 동이고 세 글자인 데이터 모두 검색
            LIKE '___' : 세 글자인 데이터 모두 검색
19. 사이값 데이터 조회할 때 사용하는 BETWEEN AND 구문
    - SELLECT * FROM 테이블명
        WHERE 사이값 찾을 컬럼명 BETWEEN 값이 작은 조건 AND 값이 큰 조건; 
                                        --무조건 값이 작은 조건 먼저
    - BETWEEN AND 구문은 조건 값이 포함된 데이터를 표출(이상, 이하만 되고 초과,미만은 안됨)                                        

20. 여러개 데이터를 비교하기 위한 IN 구문
    - SELECT * FROM 테이블명
        WHERE 비교될 컬럼 IN(비교 될 데이터1, 비교될 데이터 2, ......)
    - IN구문에 있는 데이터 중 하나라도 같으면 출력(OR, OR, OR 이라고 보면 됨)