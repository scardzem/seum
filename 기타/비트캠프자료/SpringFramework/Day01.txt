1. Spring Framework의 개요
    - 프레임워크의 개념
      프레임워크는 틀이나 골격을 의미한다.
      프레임워크 등장 전에는 모든 개발자들이 
      본인 스타일대로 개발을 진행했다.
      그래서 개발자들이 본인 스타일대로 개발한 소스코드들은
      구조나 형식이 일정하지 않아서 소스코드의 통합이나
      유지보수가 매우 어려웠다.
      프레임워크는 개발자들이 공통된 틀에 공통된 구조와 형식을
      가지고 개발할 수 있도록 기본적인 웹 개발 틀을 제공한다.

2. Spring Framework의 장점
    - 프레임워크에서 구조와 골격을 제공하기 때문에 개발자들은
      오로지 비즈니스(업무) 로직만 구현하면 되기 때문에
      빠르게 구현 할 수 있다.
    - 프레임워크로 구현된 웹 어플리케이션들은 거의 구조가
      비슷하기 때문에 관리하기 쉽고 유지보수의 편의성이 증가한다.

3. Spring Framework의 특징
    - AOP(Aspect Oriented Programming)
      관점지향 프로그래밍
      (지금까지 배웠던건 OOP(객체지향))
        개발자 A ---------------> 업무 A
        개발자 B ---------------> 업무 B
        개발자 C ---------------> 업무 C
        업무 A, B, C를 개발할 때 공통적으로 들어가는 소스코드들
        (로그를 찍거나 트랜잭션 처리를 하는 등)은 스프링에서 관리를 함
        개발자 A, B, C는 공통적인 소스코드는 신경 쓸 필요가 없이
        오롯이 업무 로직만 구현하면 된다.
        ■ 공통적인 소스코드들을 횡단관심이라고 부르며 스프링 설정파일로 관리한다.
    - 컨테이너 기반의 언어
      스프링 안의 컨테이너들은 설정 파일을 읽어서 객체의 생성 및
      소멸 등 생명주기를 관리하며 프레임워크가 동작하도록 만들어준다.
    - IOC(Inversion Of Control) 컨테이너
      제어의 역전
      (기존 객체 생성은->) Car car;
                          Car car = new KiaCar();
      스프링에서는 설정파일로 객체를 생성할 수 있다.
      제어의 역전이라는 의미는 개발자가 제어하던 것들을
      프레임워크가 대신 해주는 것을 의미
      1) DL(Dependency Lookup): 설정파일을 객체의 생성과 소멸을 관리해주는 기능
                                bean이나 어노테이션을 이용하여 설정한다.
      2) DI(Dependency Injection): 의존성 주입은 생성된 객체에 
                                   형태가 알맞는 객체를 넣어주는 것을 의미
                                   스프링 설정 파일로 개발자가 직접 의존성을
                                   주입하는 것이 아니고 프레임워크에서 자동으로
                                   주입하도록 설정한다.
                                   setter, 생성자, 어노테이션을 이용하여 설정

4. JSP/Servlet
    - JSP(Java Server Page): HTML 문서에서 자바소스를 사용하기 위해 개발된 기술
                             JSP도 Servlet을 상속받아 만들어지기 때문에
                             WAS에서 클래스로 컴파일이 된 후 동작
                             (초기에는 자바는 안 쓰고 JSP로만 처리했음)
                             이전에는 모든 처리를 JSP에서 했다.
                             현재는 화면단(뷰)만 담당하도록 구현
                             백엔드 언어라고도 볼 수 있고 화면단만 담당하기
                             때문에 프론트엔드 언어라고 볼 수 있다.
    - Servlet: 자바 소스코드에서 HTML 태그를 사용하기 위해서 개발된 기술
               서블릿은 점점 백엔드 쪽으로 발전된 상태이고
               현재는 사용자의 요청을 받는 Request, 응답을 Response 등을
               처리하도록 발전
               요청과 요청에 대한 응답은 무조건 서블릿을 통해서 진행된다.

5. WEB 서버와 WAS
    - 웹의 기본 구조
      사용자 ----- 요청 -----> WEB서버
            <----- 응답 ----- (WEB서버에서 직접 처리 가능한 작업)
      사용자 ----- 요청 -----> WEB 서버 ----- 요청 -----> WAS
            <----- 응답 ----- WEB 서버 <----- 응답 -----
    - WEB 서버 : 사용자로부터 요청을 받아들이고 사용자에게 응답을 전달해주는 서버
                 정적인 리소스들(html, css, image 등) 관리
                 종류로는 apache, webtob, ngix 등등
                 (실습할때 apache가 WEB이고 tomcat이 WAS역할임)
    - WAS(Web Application Server): 실질적으로 웹 어플리케이션을 구동 해 주는 서버
                                   동적인 리소스들 관리(jsp, class, xml 등)
                                   사용자가 WEB 서버에서 직접 처리 할 수 없는
                                   요청(DB의 데이터 조회 등)을 할 경우
                                   WAS에서 해당 class의 메소드를 실행시켜서
                                   응답을 WEB 서버로 전달
                                   종류는 tomcat, jeus, Web Logic 등등

6. GET/POST
    - GET: a태그 link클릭 할 때, 주소창에 주소 직접 입력할 때,
           form태그의 method가 get으로 설정 됐을 때, 
           비동기통신(ajax) 방식을 get으로 설정했을 때는
           GET방식으로 요청을 보낸다.
           GET방식으로 요청할 시 파라미터들이 주소에 표출됨(쿼리스트링)
    - POST: form태그의 method가 post일 때나
            비동기 통신(ajax) 방식이 post일 때만
            POST방식으로 요청을 보냄
            POST방식은 파라미터들이 표출이 안 됨
    - GET과 POST 모두 파라미터를 넘길 때는 key=value로 매핑해서 넘겨줌