6.28
1. 스프레드 문법
    - ...키워드로 사용(...rest처럼)
    - 스프레드 문법은 하나로 뭉쳐있는 여러 값들의 집합을 펼쳐서 개별적인 값들의 목록으로 만듦
    - Rest 파라미터와는 완전 반대 개념이다.
    - Rest 파라미터는 매개변수로 전달된 값들을 배열로 묶어주는 것.
       (스프레드는 풀어주는거고 rest는 묶어주는것)
--_34~~36_spread00*.html

2. 디스트럭쳐링 할당(비구조화 할당)
    - 배열같은 집합 또는 객체의 구조를 파괴하여 1개 이상의 변수에
      개별적으로 할당하는 것
--_37~~38_destructuring00*.html

3. Set
    - Set은 중복되지 않는 유일한 값들의 집합
    - 배열과 유사하지만 순서가 의미가 없고, 중복 값이 허용 안 되고,
      인덱스로 요소에 접근 불가
    - Set의 선언은 new Set();
--_39_Set001.html

4. Map
    - Map은 키와 값을 쌍으로 가지는 컬렉션
    - 객체와의 차이점
        객체는 키로 사용할 수 있는 값: 문자열과 심벌
        Map은 키로 사용할 수 있는 값: 객체를 포함한 모든 값
        객체의 요소 개수 확인: length
        Map의 요소 개수 확인: size
    - Map의 생성은 new Map();
--_40_Map001.html

5. Promise(프로미스)
    - 자바스크립트에서는 비동기 처리를 위한 하나의 패턴으로 콜백 함수를 사용
    - 비동기 처리를 위해서 콜백 함수 안에 콜백 함수를 호출하는 경우가 발생
    - 콜백 함수 안에 콜백 함수를 계속하여 호출하는 것을 콜백 지옥이라고 한다.
    - 콜백 지옥을 해결하기 위해 만들어진 문법이 프로미스

6. async / await
    - async / await는 프로미스 기반으로 움직인다.
    - async/await를 사용하면 비동기 처리인 프로미스를 동기처리하는 것처럼
      사용 할 수 있다.
    - function 앞에 async를 붙여주고 promise 구문에 await를 붙여줌
    - 프로미스가 끝날 때까지 기다리고 결과 값을 변수에 담을 수 있음

7. 제네레이터
    - 제네레이터는 코드 블록을 일시 중지했다가 필요한 시점에 다시
      재개할 수 있는 특수한 함수
    - 제네레이터 선언 방식 function*
    - 하나 이상의 yield 구문을 가져야만 한다.
    - 화살표 함수로는 정의할 수 없다.
    - 제네레이터는 객체로 생성하여 사용한다.
    - next()라는 메소드를 사용하여 다음 yield를 만날 때까지의 코드를 실행
    - 마지막 yield가 사용되고 yield가 더이상 없을 때는 return;