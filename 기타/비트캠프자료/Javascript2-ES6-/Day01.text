6.27 (ES6)

1. ES5 var의 문제점
    - var 중복 선언이 가능함
    - var는 블록 단위 변수가 아님(함수나 전역 단위만 지정가능)
    - var는 호이스팅(끌어올림) 가능
--01~03problemOfVar~~.html

2. 블록 단위의 let 등장
    - let은 중복선언 불가능
    - let은 블록 단위의 변수
--_04_let001.html
    - let은 호이스팅 불가능
--_05_let002.html
--_06_let003.html

3. 상수를 정의하는 const 키워드
    - 상수를 정의할 때는 선언과 동시에 초기화 필수
--_07_const001.html
    - let과 동일하게 블록 단위의 변수, 호이스팅을 지원하지 않음
--_08_const002.html
    - const는 상수이기 때문에 새로운 값을 할당할 수 없다.
--_09_const003.html
    - const를 선언할 때 변수명은 대문자로 지정한다.
--_10_const004.html

4. const 키워드와 객체
    - const로 객체를 선언했을 때 객체안에 내용은 변경 가능
    - 원시값인 변수는 재할당 없이는 변수 값을 변경할 수가 없음
    - 객체의 속성값들은 재할당 없이도 직접 변경할 수 있음
    - const는 재할당을 금지하는 것이고 불변을 의미하지는 않는다.
--_11_const005.html

5. ES6에서의 변수 선언
    - 기본적으로는 const로 변수를 선언하되 재할당이 필요한 변수는 let으로 선언
    - var를 사용하지 않음
    - let 변수를 선언할 때는 최대한 단위를 작게 선언
    - 상수의 객체는 최대한 const로 선언하도록 한다.

6. 템플릿 리터럴
    - 탬플릿 리터럴은 ES6에서 도입된 새로운 문자열 표기법
    - 탬플릿 리터럴을 멀티라인 문자열, 표현식 삽입, 태그드 탬플릿을 지원한다.
        (태그드 탬플릿은 리액트에서 스타일 컴포넌트 할 때 살펴볼 예정.)
    - 탬플릿 리터럴은 백틱(`)을 사용해서 선언
--_12_templateLiteral001.html
    - ${} 이용해서 선언된 변수를 문자열 직접 삽입할 수 있다.
--_13_templateLiteral002.html

7. 지수 연산자
    - 거듭제곱을 계산해주는 연산자
    - **로 표시 ; Math.pow()와 동일한 기능
--_14_exponentOp001.html

8. 논리연산자를 이용한 단축평가
    - &&, || (논리결과 true, false 대신) 결과를 결정하는 값을 반환
        ex) 'cat' && 'dog' = 'dog' 
                &&은 앞에 것이 true이면 뒤에 것도 true여야 되니까 
                뒤에 있는 dog로 true나 false가 결정 되기 때문에 dog가 반환되는 것.
        ex2) 'cat' || 'dog' = 'cat'
                ||은 둘중 하나만 true여도 true이기 때문에 앞의 것이 true이면 앞의 것을 바로 반환.
    - true || anything = true
      false || anything = anything
      true && anything = anything
      false && anything = false
--_15_shortCircuit001.html
--_16_shortCircuit002.html

9. 객체에 추가된 기능들
    - 속성의 축약 표현
      //ES5
      var obj = {
        x: 1,
        y: 2
      }
      //ES6
      let x = 1, y = 2;
      const obj = {x, y};
       -> 키가 x 값이 1 , 키가 y 값이 2인 객체 생성
--_17_object001.html
    - 계산된 프로퍼티 이름
      탬플릿 리터럴의 표현식 삽입 기능을 이용하여 동적으로
      속성값을 만들어 줄 수 있다.
--_18_object002.html
    - 메소드의 축약표현
--_19_object003.html

10. ES6에서 새로 도입된 class
    - ES5에서는 객체의 상속을 하려면 무조건 프로토타입의 상속을 이용했다.
    - 객체지향 언어에 익숙한 개발자들이 프로토타입 기반 개발에 어려움을 느껴서
      ES6에서 class가 도입됨
    - class를 사용한다고 프로토타입 기반을 포기하는 것은 아니다.
      ES5의 객체 생성 방식에 하나의 방식이 추가된 것이라고 생각하면 된다.
    - 기존 객체 생성방식보다 편하게 상속을 구현할 수 있다.(extends, super 키워드 사용가능)
    - class의 선언
        class 객체명{
            //생성자 함수는 항상 constructor로 만들어야 된다.
            constructor(매개변수){
                초기화 과정;
            }
            프로토타입 메소드{

            }
            정적 메소드{

            }
            get getter 메소드(){

            }
            set setter 메소드(){

            }
        }
    - class에는 필드를 지정할 수 없음, 메소드만 선언 가능
--_20_class001.html

    11. class의 상속
        - extends 키워드를 사용하여 상속받아 새로운 클래스를 정의한다.
--_21_class001.html
        - 생성함수를 상속 받아서 동적으로 클래스를 만들 수 있다.
--_22_class003.html
    
12. ES6의 화살표 함수
    - ES6 이전의 메소드들은 모두 호출 가능하면서 생성자 함수로 사용가능
      그래서 모든 메소드들에 불필요하게 prototype 객체가 생성되는 경우가 발생
    - 호출 가능하지만 생성자 함수로는 사용 불가능한 화살표 함수가 등장
    - 화살표 메소드의 정의
      function 키워드 대신 =>
      //ES5
      function add(a, b) {
        return a + b;
      }

      //ES6 화살표 함수
      1)
      const add = (a, b) => {
        return a + b;
      }
      2) 소괄호로 감싸면 소괄호 안의 내용은 모두 리턴(중괄호는 빼야함)
      const add \ (a, b) => (
        a + b;
      )
      3) 매개변수가 하나일 때는 소괄호 생략
      const print = a => {
        console.log(a);
      }
      4)
      const add = () => {
        console.log(1 + 2);
      }
_23_arrowFunction001.html

13. 화살표 함수와 일반 함수의 차이점
    - 화살표 함수는 생성자 함수로 사용 불가능
--_24_arrowFunction002.html
    - 화살표 함수는 prototype이 생성되지 않음
--_25_arrowFunction003.html
    - 중복된 매개변수 이름을 사용할 수 없다.
--_26_arrowFunction004.html
    - 화살표 함수는 arguments, this, super, new.target 바인딩을 갖지 않음
--_27_arrowFunction005.html

14. Rest 파라미터
    - ...키워드를 사용하여 함수에 전달된 매개변수 목록을 배열로 전달 받는다.
--_28_RestParameter001.html

15. 매개변수의 기본 값 지정
    - ES6에서는 함수를 정의할 때 매개변수의 기본값을 지정할 수 있다.
     function add(a = 1, b = 1) {
        return a + b;
     }
    - Rest 파라미터에는 기본 값을 지정할 수 없다.
--_29_defaultValueofParameter001.html

16. 배열의 고차원 함수 
    (ES5에도 있지만 설명 안 하고 지나갔었음, react에서 많이 쓰는것들 위주로)
    1) concat : 원본 배열의 마지막에 새로운 요소를 추가한 새로운 배열 반환
--_30_concat.html
    2) map : 배열의 요소를 하나씩 꺼내서 인수로 전달된 콜백함수를 반복호출
             콜백함수의 반환 값들로 이뤄진 새로운 배열 반환
--_31_map.html
    3) filter : 배열의 요소를 하나씩 꺼내서 인수로 전달된 콜백함수를 반복호출
                콜백함수의 반환 값이 true인 요소로만 이뤄진 새로운 배열 반환