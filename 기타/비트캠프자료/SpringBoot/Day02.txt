1. Hikari CP
    - 2012년 개발된 커넥션 풀
      스프링부트 2.0부터 기본 커넥션 풀로 지정됨
      스프링프레임워크에서는 기본 JDBC 클래스에서 제공하는 커넥션 풀을 사용
      스프링부트에서는 Hikari CP를 이용해서 커넥션풀 만든다
    - 커넥션 풀은 데이터베이스와 연결된 커넥션들을 미리 생성해놓고
      pool로 관리하는 것을 의미
                             커넥션 풀
                              커넥션1 
                              커넥션2
              커넥션 요청      커넥션3
      사용자1  ------------>   .....
               <-----------
               사용중이지 않은
               커넥션을 하나 빌려주는 형태

2. ORM(Object Relational Mapping)
    - 자바객체와 테이블을 매핑시키는 기술 및 프레임워크

3. JPA(Java Persistence API)
    - JPA는 실제 동작을 만드는 것이 아니고 어떻게 동작해야 되는지
      매커니즘을 명시한다.
    - 개발자가 테이블과 1대1로 매핑되는 객체(VO, DTO, Entity)를 이용하여
      쿼리 매커니즘을 명세하면 자동으로 쿼리가 생성되고 실행됨
    - JPA는 인터페이스고 대표적인 구현체로는 Hibernate, EclipseLink, DataNucles 등이 있다.

4. Hibernate
    - JPA의 대표적인 구현체중 하나로 CRUD에 필요한 인터페이스를 제공하고
      리포지토리를 정의해 사용하므로써 스프링이 적합한 쿼리를 동적으로 
      생성하는 방식으로 테이터베이스를 조작

5. Persistence Context(영속성 컨텍스트)
    - 어플리케이션과 데이터베이스 사이에서 엔티티와 데이터의 괴리를 해소하는 기능과
      객체를 보관하는 기능을 제공
      어플리케이션         영속성컨텍스트         데이터베이스
       엔티티1  --------->  영속성객체1  ------->   테이블1
       엔티티2              영속성객체2             테이블2

6. Entity Manager
    - 데이터베이스에 접근하여 직접 쿼리를 수행하는 객체
    - Entity Manager를 상속받은 객체를 조작하여 수행

7. JPA 옵션
    - spring.jpa.hibernate.ddl-auto
      create: 어플리케이션이 실행될 때 기존 테이블을 삭제하고 다시 생성
      create-drop: 삭제 시점이 어플리케이션 종료(나머지는 create 동일하게 동작)
      update: 변경된 스키마만 적용. 기존 데이터는 유지
      validate: update와 비슷하지만 스키마는 변경하지 않고 테이블 정보만 변경
      none: ddl-auto 기능을 사용하지 않음