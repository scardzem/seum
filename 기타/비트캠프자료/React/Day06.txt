1. JSON이란
    - JavaScript Object Notation의 약자
    - 데이터를 저장하거나 전송할 때 많이 사용되는 
      경량의 DATA 교환 방식
    - JSON은 단순히 데이터의 포맷일 뿐 통신방식도 프로그래밍
      문법도 아님
    - JSON은 Javascript 객체 기반의 데이터 포맷

2. Context API
    - Context API는 리액트 프로젝트에서 전역적으로 사용하는
      데이터가 있을 때 유용한 기능
    - 사용자 정보같이 모든 컴포넌트에서 접근 가능한 상태를 
      관리할 때 사용함
    - 새 Context 만들 때는 createContext 함수를 이용
    - Consumer 컴포넌트: Context의 변화를 감지하는 컴포넌트
    - Provider 컴포넌트: Context의 value를 변경할 수 있는
                        컴포넌트.
                        Provider 사용할 때 변경할 value 값을
                        명시하지 않으면 에러 발생

3. 리덕스 라이브러리
    - 리덕스는 리액트에서 가장 많이 사용되는 상태관리 라이브러리
    - 리덕스를 사용하면 컴포넌트의 상태 업데이트 관련 로직을 
      다른 파일로 분리하여 효율적으로 관리할 수 있다.
    - 컴포넌트끼리 똑같은 상태를 공유해야 할 때도 여러 컴포넌트를
      거치지않고 손쉽게 상태 값을 전달하거나 업데이트할 수 있다.
    - 리덕스는 상태를 더욱 체계적으로 관리할 수 있어서 규모가
      큰 프로젝트에서는 리덕스를 주로 사용한다.
    - 리덕스는 미들웨어라는 기능을 제공하여 비동기 작업을
      훨씬 효율적으로 관리함

4. 리덕스의 키워드
    - 액션: 상태에 어떠한 변화가 있을 때마다 액션이 발생
    - 액션은 하나의 객체 형태로 표현
    - 액션 객체는 반드시 type필드를 가지고 있어야 됨
      ex) {
            type: 'ADD_TODO',
            data: {
              id: 1,
              text: '리덕스 배우기'
            }
          }
    - 액션 생성 함수: 액션 객체를 만들어주는 함수
      ex) function addTodo(data) {
            return {
              type: 'ADD_TODO',
              data
            }
          }

          const addTodo = (data) => {
            return {
              type: 'ADD_TODO',
              data
            }
          }
    - 리듀서: 변화를 일으키는 함수
    - 액션을 만들어서 발생시키면 리듀서가 현재 상태와 전달받은
      액션 객체를 파라미터로 받아옴
    - 파라미터로 받아온 두 값을 참고하여 새로운 상태를 만들어서 반환
      ex) function reducer(state, action) {
              switch(action.type) {
                case "ADD_TODO":
                  return {
                    새로운 상태 값;
                  }
                default:
                  return state;
              }
          }
    - 스토어: 프로젝트에 리덕스를 적용하기 위해 만드는 객체
    - 현재 어플리케이션의 상태와 리듀서, 
      그리고 몇 가지의 내장함수를 가지고 있다.
    - 하나의 프로젝트에는 하나의 스토어만 생성 가능
    - 디스패치: 디스패치는 스토어의 내장함수 중 하나
               액션을 발생시키는 함수
               dispatch(action)
               디스패치가 호출되면 리듀서함수를 실행시켜서
               새로운 상태를 만들어줌
    - 구독(subcribe): 스토어의 내장함수 중 하나
                      구독 함수 파라미터로 함수를 보내주면
                      액션이 발생되서 상태가 변경될 때마다
                      파라미터로 전달된 함수가 실행

5. 리액트 리덕스 프로젝트
    - 리액트 리덕스 프로젝트에서 가장 많이 사용하는 패턴은
      프레젠테이션 컴포넌트와 컨테이너 컴포넌트를 분리하여
      만드는 패턴
    - 프레젠테이션 컴포넌트는 props를 받아서 화면에 UI만
      보여주는 컴포넌트
    - 컨테이너 컴포넌트는 리덕스와 연동되어 있는 컴포넌트로
      리덕스로부터 상태를 받아오거나 액션을 디스패치하기도 함